prepare-test-only-plugin:
    stage: test
    rules: 
        - !reference [.base_rules, rules]
        - if: '$VERSION != "0.0.0"'
          when: on_success
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
          when: on_success
        - when: never
    tags: 
        - Windows
    needs: 
        - job: 'prepare-test'
    artifacts:
      reports:
        dotenv: build.env
    script:
        - |
            $files = @();
            $files2 = @();

            function ProccessFile ([string]$csProjfile) 
            {
                $correctReference = '<Reference Include=".*" HintPath="\$\(MISTAKEN_REFERENCES\)[\/\\](.*\.dll)" \/>'

                $correctMultiLineReference = '<HintPath>\$\(MISTAKEN_REFERENCES\)(\/|\\)(.*\.dll)<\/HintPath>'
                $content = Get-Content $csProjfile;
                for($i = 0; $i -lt $content.length; $i++) 
                {
                    $line = $content[$i];

                    if($line -match $correctReference)
                    {
                        $files += [string]([regex]::match($line, $correctReference).Groups[1].Value) + ";";
                    }
                    elseif($line -match $correctMultiLineReference)
                    {
                        $files += [string]([regex]::match($line, $correctMultiLineReference).Groups[1].Value) + ";";
                    }
                }

                foreach($file in $files.Split(';')) 
                {
                    echo $file;
                    if(($file -match "0Mistaken\.API") -or ($file -match "Mistaken\.Updater") -or ($file -match "Mistaken\.RoundLogger") -or ($file -match "Mistaken\.CITester"))
                    {
                        echo "Skipped.1";
                        continue;
                    }
                    if(($file -match "UnityEngine\.") -or ($file -match "Exiled\.") -or ($file -match "Mirror\.dll") -or ($file -match "CommandSystem\.Core\.dll") -or ($file -match "NorthwoodLib\.dll") -or ($file -match "Assembly"))
                    {
                        echo "Skipped.2";
                        continue;
                    }
                        
                    $files2 += $file;
                }

                $tmp = $files2 -join ';';
                Add-Content -Path build.env -Value "REQUIED_PLUGINS=${tmp}"
                echo $tmp;
                exit 0;
            }

            function ProccessDirectory ([string]$parrentDir) 
            {
                foreach($dir in (Get-ChildItem -Path  "${parrentDir}" -Attributes Directory -Force))
                {   
                    $dir = $dir | Resolve-Path -Relative;
                    ProccessDirectory ".\${dir}"
                }

                foreach($_file in (Get-ChildItem -Path "${parrentDir}" -Force -Attributes !Directory)) 
                {
                    $_file = $_file | Resolve-Path -Relative;
                    $file = ".\${_file}"
                    if (!($file -match '.*\.csproj$'))
                    {
                        continue;
                    }

                    ProccessFile $file
                }
            }

            ProccessDirectory "./"

            echo "Project file not found";
            exit 1;
            


test-only-plugin:
    stage: test
    rules: 
        - !reference [.base_rules, rules]
        - if: '$VERSION != "0.0.0"'
          when: on_success
        - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
          when: on_success
        - when: never
    needs: 
        - job: 'build'
          artifacts: true
        - job: 'prepare-test-only-plugin'
          artifacts: true
    variables:
        CI_TESTER_BRANCH: "main"
        SH_PATH: "jobs%2Ftest%2Ftest-only-plugin.sh"
        SH_BRANCH: "master"
    tags: 
        - Linux
    artifacts:
        reports:
            junit: test-result.xml
    script:
        - 'curl -o "test-only-plugin.sh" -H "PRIVATE-TOKEN: $API_KEY" "${CI_API_V4_URL}/projects/${CI_INCLUDE_REPO_ID}/repository/files/${SH_PATH}/raw?ref=${SH_BRANCH}"'
        - 'curl -o "CI Tester" -H "PRIVATE-TOKEN: $API_KEY" "${CI_API_V4_URL}/projects/Barwa%2FCI-Tools/jobs/artifacts/$CI_TESTER_BRANCH/raw/build/CI%20Tester?job=build-code-job"'
        - 'chmod 744 ./test-only-plugin.sh'
        - './test-only-plugin.sh'
    after_script:
      - mv "/home/scpsl/server_files/test-result.xml" "$CI_PROJECT_DIR/test-result.xml"
